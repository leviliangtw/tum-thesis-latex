@inproceedings{anandCloudMonitorMonitoring2012,
  title = {Cloud {{Monitor}}: {{Monitoring Applications}} in {{Cloud}}},
  shorttitle = {Cloud {{Monitor}}},
  booktitle = {2012 {{IEEE International Conference}} on {{Cloud Computing}} in {{Emerging Markets}} ({{CCEM}})},
  author = {Anand, Manu},
  date = {2012-10},
  pages = {1--4},
  publisher = {IEEE},
  location = {Bangalore, KA, India},
  doi = {10.1109/CCEM.2012.6354603},
  url = {http://ieeexplore.ieee.org/document/6354603/},
  urldate = {2024-03-10},
  abstract = {With the advent of cloud computing applications, monitoring becomes a valid concern. Monitoring for failures in a cloud application is difficult because of multiple failure points spanning both hardware and software. Moreover the cluster nature of a cloud application increases the scope of failure and it becomes even harder to detect the same.},
  eventtitle = {2012 {{IEEE International Conference}} on {{Cloud Computing}} in {{Emerging Markets}} ({{CCEM}})},
  isbn = {978-1-4673-4422-7 978-1-4673-4421-0 978-1-4673-4420-3},
  langid = {english},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/ITVLVLI2/Anand - 2012 - Cloud Monitor Monitoring Applications in Cloud.pdf}
}

@inproceedings{arachchiContinuousIntegrationContinuous2018,
  title = {Continuous {{Integration}} and {{Continuous Delivery Pipeline Automation}} for {{Agile Software Project Management}}},
  booktitle = {2018 {{Moratuwa Engineering Research Conference}} ({{MERCon}})},
  author = {Arachchi, S.A.I.B.S. and Perera, Indika},
  date = {2018-05},
  pages = {156--161},
  doi = {10.1109/MERCon.2018.8421965},
  url = {https://ieeexplore.ieee.org/document/8421965},
  urldate = {2024-03-10},
  abstract = {Agile practices with Continuous Integration and Continuous Delivery (CICD) pipeline approach has increased the efficiency of projects. In agile, new features are introduced to the system in each sprint delivery, and although it may be well developed, the delivery failures are possible due to performance issues. By considering delivery timeline, moving for system scaling is common solution in such situations. But, how much system should be scaled? System scale requires current system benchmark status and expected system status. Benchmarking the production is a critical task, as it interrupts the live system. The new version should go through a load test to measure expected system status. The traditional load test methods are unable to identify production performance behavior due to simulated traffic patterns are highly deviated from production. To overcome those issues, this approach has extended CICD pipeline to have three automation phases named benchmark, load test and scaling. It minimizes the system interruption by using test bench approach when system benchmarking and it uses the production traffic for load testing which gives more accurate results. Once benchmark and load test phases are completed, system scaling can be evaluated. Initially, the pipeline was developed using Jenkins CI server, Git repository and Nexus repository with Ansible automation. Then GoReplay is used for traffic duplication from production to test bench environment. Nagios monitoring is used to analyze the system behavior in each phase and the result of test bench has proven that scaling is capable to handle the same load while changing the application software, but it doesn't optimize response time of application at significant level and it helps to reduce the risk of application deployment by integrating this three phase approach as CICD automation extended feature. Thereby the research provides effective way to manage Agile based CICD projects.},
  eventtitle = {2018 {{Moratuwa Engineering Research Conference}} ({{MERCon}})},
  keywords = {agile project management,Automation,Benchmark testing,configuration management,continuous delivery,continuous integration,Pipelines,Production,Software,Tools,version management},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/768UDRC8/Arachchi and Perera - 2018 - Continuous Integration and Continuous Delivery Pip.pdf}
}

@online{ArgoCDDeclarative,
  title = {Argo {{CD}} - {{Declarative GitOps CD}} for {{Kubernetes}}},
  url = {https://argo-cd.readthedocs.io/},
  urldate = {2024-03-08},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/2Y6K3K5U/stable.html}
}

@inproceedings{armeniseContinuousDeliveryJenkins2015,
  title = {Continuous {{Delivery}} with {{Jenkins}}: {{Jenkins Solutions}} to {{Implement Continuous Delivery}}},
  shorttitle = {Continuous {{Delivery}} with {{Jenkins}}},
  booktitle = {2015 {{IEEE}}/{{ACM}} 3rd {{International Workshop}} on {{Release Engineering}}},
  author = {Armenise, Valentina},
  date = {2015-05},
  pages = {24--27},
  publisher = {IEEE},
  location = {Florence, Italy},
  doi = {10.1109/RELENG.2015.19},
  url = {http://ieeexplore.ieee.org/document/7169448/},
  urldate = {2024-03-08},
  abstract = {This paper illustrates how Jenkins evolved from being a pure Continuous Integration Platform to a Continuous Delivery one, embracing the new design tendency where not only the build but also the release and the delivery process of the product is automated. In this scenario Jenkins becomes the orchestrator tool for all the teams/roles involved in the software lifecycle, thanks to which Development, Quality\&Assurance and Operations teams can work closely together.},
  eventtitle = {2015 {{IEEE}}/{{ACM}} 3rd {{International Workshop}} on {{Release Engineering}} ({{RELENG}})},
  isbn = {978-1-4673-7070-7},
  langid = {english},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/5MB2GSWV/Armenise - 2015 - Continuous Delivery with Jenkins Jenkins Solution.pdf}
}

@online{AssociatingSecondaryInterfaces,
  title = {Associating Secondary Interfaces Metrics to Network Attachments | {{Networking}} | {{OpenShift Container Platform}} 4.14},
  url = {https://docs.openshift.com/container-platform/4.14/networking/associating-secondary-interfaces-metrics-to-network-attachments.html},
  urldate = {2024-03-10},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/LUKRVML4/associating-secondary-interfaces-metrics-to-network-attachments.html}
}

@online{atlassianBitbucketGitSolution,
  title = {Bitbucket | {{Git}} Solution for Teams Using {{Jira}}},
  author = {Atlassian},
  url = {https://bitbucket.org/product},
  urldate = {2024-03-11},
  abstract = {Bitbucket Cloud is a Git-based code and CI/CD tool optimized for teams using Jira.},
  langid = {english},
  organization = {Bitbucket}
}

@article{beetzGitOpsEvolutionDevOps2022,
  title = {{{GitOps}}: {{The Evolution}} of {{DevOps}}?},
  shorttitle = {{{GitOps}}},
  author = {Beetz, Florian and Harrer, Simon},
  date = {2022-07},
  journaltitle = {IEEE Software},
  shortjournal = {IEEE Softw.},
  volume = {39},
  number = {4},
  pages = {70--75},
  issn = {0740-7459, 1937-4194},
  doi = {10.1109/MS.2021.3119106},
  url = {https://ieeexplore.ieee.org/document/9565152/},
  urldate = {2024-03-08},
  langid = {english},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/HA29YPJ4/Beetz and Harrer - 2022 - GitOps The Evolution of DevOps.pdf}
}

@article{beizerBlackBoxTesting1996,
  title = {Black {{Box Testing}}: {{Techniques}} for {{Functional Testing}} of {{Software}} and {{Systems}}},
  shorttitle = {Black {{Box Testing}}},
  author = {Beizer, B. and Wiley, J.},
  date = {1996-09},
  journaltitle = {IEEE Software},
  volume = {13},
  number = {5},
  pages = {98-},
  issn = {1937-4194},
  doi = {10.1109/MS.1996.536464},
  eventtitle = {{{IEEE Software}}},
  keywords = {Software systems,Software testing,System testing},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/7QHLYVDE/Beizer and Wiley - 1996 - Black Box Testing Techniques for Functional Testi.pdf}
}

@inproceedings{bertolinoSoftwareTestingResearch2003,
  title = {Software Testing Research and Practice},
  booktitle = {Proceedings of the Abstract State Machines 10th International Conference on {{Advances}} in Theory and Practice},
  author = {Bertolino, Antonia},
  date = {2003-03-03},
  series = {{{ASM}}'03},
  pages = {1--21},
  publisher = {Springer-Verlag},
  location = {Berlin, Heidelberg},
  abstract = {The paper attempts to provide a comprehensive view of the field of software testing. The objective is to put all the relevant issues into a unified context, although admittedly the overview is biased towards my own research and expertise. In view of the vastness of the field, for each topic problems and approaches are only briefly tackled, with appropriate references provided to dive into them. I do not mean to give here a complete survey of software testing. Rather I intend to show how an unwieldy mix of theoretical and technical problems challenge software testers, and that a large gap exists between the state of the art and of the practice.},
  isbn = {978-3-540-00624-4},
  keywords = {Finite State Machine,Software Reliability,Software Test,Test Criterion,Test Suite},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/3XLTKS3A/Bertolino - 2003 - Software Testing Research and Practice.pdf}
}

@book{beyerSiteReliabilityEngineering2016,
  title = {Site {{Reliability Engineering}}},
  author = {Beyer, Betsy and Jones, Chris and Murphy, Niall Richard and Petoff, Jennifer},
  date = {2016-04},
  publisher = {O'Reilly Media, Inc.},
  url = {https://learning.oreilly.com/library/view/site-reliability-engineering/9781491929117/},
  urldate = {2024-01-08},
  abstract = {The overwhelming majority of a software system's lifespan is spent in use, not in design or implementation. So, why does conventional wisdom insist that software engineers focus primarily on the...},
  isbn = {978-1-4919-2911-7},
  langid = {english},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/WXVL72XY/9781491929117.html}
}

@software{BlackboxExporter,
  title = {Blackbox Exporter},
  url = {https://github.com/prometheus/blackbox_exporter},
  urldate = {2023-05-26},
  abstract = {Blackbox prober exporter},
  organization = {Prometheus},
  keywords = {blackbox-exporter,icmp,prometheus,prometheus-exporter}
}

@article{brondolinBlackboxMonitoringApproach2020,
  title = {A {{Black-box Monitoring Approach}} to {{Measure Microservices Runtime Performance}}},
  author = {Brondolin, Rolando and Santambrogio, Marco D.},
  date = {2020-11-10},
  journaltitle = {ACM Transactions on Architecture and Code Optimization},
  shortjournal = {ACM Trans. Archit. Code Optim.},
  volume = {17},
  number = {4},
  pages = {34:1--34:26},
  issn = {1544-3566},
  doi = {10.1145/3418899},
  url = {https://dl.acm.org/doi/10.1145/3418899},
  urldate = {2023-05-21},
  abstract = {Microservices changed cloud computing by moving the applications’ complexity from one monolithic executable to thousands of network interactions between small components. Given the increasing deployment sizes, the architectural exploitation challenges, and the impact on data-centers’ power consumption, we need to efficiently track this complexity. Within this article, we propose a black-box monitoring approach to track microservices at scale, focusing on architectural metrics, power consumption, application performance, and network performance. The proposed approach is transparent w.r.t. the monitored applications, generates less overhead w.r.t. black-box approaches available in the state-of-the-art, and provides fine-grain accurate metrics.},
  keywords = {cloud computing,docker,kubernetes,Microservices,network performance monitoring,performance monitoring,power attribution},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/KU4AJLZE/Brondolin and Santambrogio - 2020 - A Black-box Monitoring Approach to Measure Microse.pdf}
}

@online{BuildSoftwareBetter,
  title = {Build Software Better, Together},
  url = {https://github.com},
  urldate = {2024-03-11},
  abstract = {GitHub is where people build software. More than 100 million people use GitHub to discover, fork, and contribute to over 420 million projects.},
  langid = {english},
  organization = {GitHub}
}

@online{ChapterMonitoringGoogle,
  title = {Chapter 4 - {{Monitoring}}, {{Google SRE Book}}},
  url = {https://sre.google/workbook/monitoring/},
  urldate = {2024-03-10},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/5KCNNUXK/monitoring.html}
}

@book{ciuffolettiNagiosDesignCloud2016,
  title = {Beyond {{Nagios}} - {{Design}} of a {{Cloud Monitoring System}}},
  author = {Ciuffoletti, Augusto},
  date = {2016-04-23},
  doi = {10.5220/0005778303630370},
  abstract = {The paper describes a monitoring system specially designed for cloud infrastructures. The features that are relevant for such distributed application are -) scalability, that allows utilization in systems of thousands of nodes, -) flexibility, to be customized for a large number of applications, -) openness, to allow the coexistence of user and administration monitoring. We take as a starting point the Nagios monitoring system, that has been successfully used for Grid monitoring and is still used for clouds. We analyze its shortcomings when applied to cloud monitoring, and propose a new monitoring system, that we call Rocmon, that sums up Nagios experience with a cloud perspective. Like Nagios, Rocmon is plugin-oriented to be flexible. To be fully inter- operable and long-living, it uses standard tools: the OGF OCCI for the configuration interface, the REST paradigm to take advantage of Web tools, and HTML5 WebSockets for data transfers. The design is checked with an open source Ruby implementation featuring the most relevant aspects.},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/D6KKPC6A/Ciuffoletti - 2016 - Beyond Nagios - Design of a Cloud Monitoring Syste.pdf}
}

@online{CloudMonitoringService,
  title = {Cloud {{Monitoring}} as a {{Service}} | {{Datadog}}},
  url = {https://www.datadoghq.com/},
  urldate = {2024-03-10},
  abstract = {See metrics from all of your apps, tools \& services in one place with Datadog's cloud monitoring as a service solution. Try it for free.},
  langid = {english},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/U3FXG2SG/www.datadoghq.com.html}
}

@online{CloudNativeComputing,
  title = {Cloud {{Native Computing Foundation}}},
  url = {https://www.cncf.io/},
  urldate = {2024-03-10},
  abstract = {CNCF is the vendor-neutral hub of cloud native computing, dedicated to making cloud native ubiquitous.},
  langid = {american},
  organization = {CNCF},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/EHBACTHS/www.cncf.io.html}
}

@online{CNCFOperatorWhite,
  title = {{{CNCF Operator White Paper}} - {{Final Version}}},
  url = {https://github.com/cncf/tag-app-delivery/blob/163962c4b1cd70d085107fc579e3e04c2e14d59c/operator-wg/whitepaper/Operator-WhitePaper_v1-0.md},
  urldate = {2023-12-28},
  abstract = {CNCF TAG App Delivery 🚚📦. Contribute to cncf/tag-app-delivery development by creating an account on GitHub.},
  langid = {english},
  organization = {GitHub},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/6MKGU9JR/Operator-WhitePaper_v1-0.html}
}

@online{CustomMetricsAutoscaler,
  title = {Custom {{Metrics Autoscaler Operator}} Overview - {{Automatically}} Scaling Pods with the {{Custom Metrics Autoscaler Operator}} | {{Nodes}} | {{OpenShift Container Platform}} 4.14},
  url = {https://docs.openshift.com/container-platform/4.14/nodes/cma/nodes-cma-autoscaling-custom.html},
  urldate = {2024-03-10},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/48U8AVG6/nodes-cma-autoscaling-custom.html}
}

@book{dobiesKubernetesOperators2020,
  title = {Kubernetes {{Operators}}},
  author = {Dobies, Jason and Wood, Joshua},
  date = {2020-02},
  url = {https://learning.oreilly.com/library/view/kubernetes-operators/9781492048039/},
  urldate = {2023-12-28},
  abstract = {Operators are a way of packaging, deploying, and managing Kubernetes applications. A Kubernetes application doesn't just run on Kubernetes; it's composed and managed in Kubernetes terms. Operators...},
  isbn = {978-1-4920-4803-9},
  langid = {english},
  keywords = {Operator},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/2BEDRNK5/9781492048039.html}
}

@online{EBPFIntroductionTutorials,
  title = {{{eBPF}} - {{Introduction}}, {{Tutorials}} \& {{Community Resources}}},
  url = {https://ebpf.io},
  urldate = {2024-03-10},
  abstract = {eBPF is a revolutionary technology that can run sandboxed programs in the Linux kernel without changing kernel source code or loading a kernel module.},
  langid = {english},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/VEVIZZ6P/ebpf.io.html}
}

@online{EffectUsingContinuous,
  title = {Effect of {{Using Continuous Integration}} ({{CI}}) and {{Continuous Delivery}} ({{CD}}) {{Deployment}} in {{DevOps}} to Reduce the {{Gap}} between {{Developer}} and {{Operation}} | {{IEEE Conference Publication}} | {{IEEE Xplore}}},
  url = {https://ieeexplore.ieee.org/document/9994139},
  urldate = {2024-03-10}
}

@article{elazharyUncoveringBenefitsChallenges2022,
  title = {Uncovering the {{Benefits}} and {{Challenges}} of {{Continuous Integration Practices}}},
  author = {Elazhary, Omar and Werner, Colin and Li, Ze Shi and Lowlind, Derek and Ernst, Neil and Storey, Margaret-Anne},
  date = {2022-07-01},
  journaltitle = {IEEE Transactions on Software Engineering},
  shortjournal = {IIEEE Trans. Software Eng.},
  volume = {48},
  number = {7},
  eprint = {2103.04251},
  eprinttype = {arxiv},
  eprintclass = {cs},
  pages = {2570--2583},
  issn = {0098-5589, 1939-3520, 2326-3881},
  doi = {10.1109/TSE.2021.3064953},
  url = {http://arxiv.org/abs/2103.04251},
  urldate = {2024-03-10},
  abstract = {In 2006, Fowler and Foemmel defined ten core Continuous Integration (CI) practices that could increase the speed of software development feedback cycles and improve software quality. Since then, these practices have been widely adopted by industry and subsequent research has shown they improve software quality. However, there is poor understanding of how organizations implement these practices, of the benefits developers perceive they bring, and of the challenges developers and organizations experience in implementing them. In this paper, we discuss a multiple-case study of three small- to medium-sized companies using the recommended suite of ten CI practices. Using interviews and activity log mining, we learned that these practices are broadly implemented but how they are implemented varies depending on their perceived benefits, the context of the project, and the CI tools used by the organization. We also discovered that CI practices can create new constraints on the software process that hurt feedback cycle time. For researchers, we show that how CI is implemented varies, and thus studying CI (for example, using data mining) requires understanding these differences as important context for research studies. For practitioners, our findings reveal in-depth insights on the possible benefits and challenges from using the ten practices, and how project context matters.},
  keywords = {Computer Science - Software Engineering},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/89R7DAJF/Elazhary et al. - 2022 - Uncovering the Benefits and Challenges of Continuo.pdf;/home/jliang/snap/zotero-snap/common/Zotero/storage/UFX6EFCU/2103.html}
}

@inproceedings{fengAutomaticModelGeneration2007,
  title = {Automatic {{Model Generation}} for {{Black Box Real-Time Systems}}},
  booktitle = {Automation \& {{Test}} in {{Europe Conference}} \& {{Exhibition}} 2007 {{Design}}},
  author = {Feng, Thomas Huining and Wang, Lynn and Zheng, Wei and Kanajan, Sri and Seshia, Sanjit A.},
  date = {2007-04},
  pages = {1--6},
  issn = {1558-1101},
  doi = {10.1109/DATE.2007.364412},
  abstract = {Embedded systems are often assembled from black box components. System-level analyses, including verification and timing analysis, typically assume the system description, such as RTL or source code, as an input. There is therefore a need to automatically generate formal models of black box components to facilitate analysis. We propose a new method to generate models of real-time embedded systems based on machine learning from execution traces, under a given hypothesis about the system's model of computation. Our technique is based on a novel formulation of the model generation problem as learning a dependency graph that indicates partial ordering between tasks. Tests based on an industry case study demonstrate that the learning algorithm can scale up and that the deduced system model accurately reflects dependencies between tasks in the original design. These dependencies help us formally prove properties of the system and also extract data dependencies that are not explicitly stated in the specifications of black box components},
  eventtitle = {Automation \& {{Test}} in {{Europe Conference}} \& {{Exhibition}} 2007 {{Design}}},
  keywords = {Algorithm design and analysis,Assembly systems,Computational modeling,Embedded computing,Embedded system,Machine learning,Machine learning algorithms,Real time systems,System testing,Timing},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/EPJ8RLTX/Feng et al. - 2007 - Automatic Model Generation for Black Box Real-Time.pdf}
}

@inproceedings{filipeClientsideBlackboxMonitoring2017,
  title = {Client-Side Black-Box Monitoring for Web Sites},
  booktitle = {2017 {{IEEE}} 16th {{International Symposium}} on {{Network Computing}} and {{Applications}} ({{NCA}})},
  author = {Filipe, Ricardo and Paiva, Rui Pedro and Araujo, Filipe},
  date = {2017-10},
  pages = {1--5},
  doi = {10.1109/NCA.2017.8171343},
  abstract = {In spite of their growing maturity, current web monitoring tools are unable to observe all operating conditions. For example, clients in different geographical locations might get very diverse latencies to the server; the network between client and server might be slow; or third-party servers with external page resources might underperform. Ultimately, only the clients can determine whether a site is up and running in good conditions. In this paper, we use the response times experienced by clients, to infer about server and network performance. The goal is to detect internal and external bottlenecks doing black-box monitoring, in particular CPU (internal) and network (external). We aim to determine to what extent are the clients able to tell one type of bottleneck from the other, i.e., what kind of information do the server and network leak, regarding their operating conditions. To answer this question, we resort to an empirical approach. We submit an HTTP server and network to a large number of operating conditions and train two machine learning algorithms, a linear and a non-linear one, to identify the cause of the congestion affecting the system. Results show that the server and network leak information to a level of detail that allows sorting out CPU from network bottlenecks, or even a combination of the two, in a large spectrum of cases. This suggests that a black-box monitoring approach is not only possible, but promising, as it may complement traditional white-box approaches.},
  eventtitle = {2017 {{IEEE}} 16th {{International Symposium}} on {{Network Computing}} and {{Applications}} ({{NCA}})},
  keywords = {Analytics,Black-box monitoring,Browsers,Client-side monitoring,Measurement,Monitoring,Selenium,Servers,Time factors,Tools,Web-site monitoring},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/N3VCS8FY/Filipe et al. - 2017 - Client-side black-box monitoring for web sites.pdf;/home/jliang/snap/zotero-snap/common/Zotero/storage/MZCER2NP/8171343.html}
}

@inproceedings{gokhaleCreatingHelmCharts2021,
  title = {Creating {{Helm Charts}} to Ease Deployment of {{Enterprise Application}} and Its Related {{Services}} in {{Kubernetes}}},
  booktitle = {2021 {{International Conference}} on {{Computing}}, {{Communication}} and {{Green Engineering}} ({{CCGE}})},
  author = {Gokhale, Shivani and Poosarla, Reetika and Tikar, Sanjeevani and Gunjawate, Swapnali and Hajare, Aparna and Deshpande, Shilpa and Gupta, Sourabh and Karve, Kanchan},
  date = {2021-09-23},
  pages = {1--5},
  publisher = {IEEE},
  location = {Pune, India},
  doi = {10.1109/CCGE50943.2021.9776450},
  url = {https://ieeexplore.ieee.org/document/9776450/},
  urldate = {2024-03-08},
  abstract = {Modern day software applications are required to have high availability and performance capabilities to ensure highly productive features and a smooth user experience. It becomes increasingly difficult for organizations to innovate with rapid building, testing and deployment of systems in static, monolithic environments. In order to ascertain the development of resilient applications, Kubernetes is widely used for distributed systems for workload scalability and orchestration of containers. The management of the system using Kubernetes becomes progressively inconvenient with increasing size and complexity. In order to make the process of Kubernetes configuration simpler and faster, Helm charts are used to preconfigure applications and automate the processes of development, testing and production. This paper proposes a method to ease the deployment of the enterprise application in Kubernetes using Helm charts. Our study shows that deployment of Kubernetes resources is simplified using Helm such that applications can be defined as a set of components in the minikube Kubernetes cluster. The experimental results of the proposed method show that there is 6.185 times speed improvement in the deployment process by using Helm. This makes it extremely influential for DevOps teams to improve their cluster management.},
  eventtitle = {2021 {{International Conference}} on {{Computing}}, {{Communication}} and {{Green Engineering}} ({{CCGE}})},
  isbn = {978-1-66541-509-5},
  langid = {english},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/56S53SWR/Gokhale et al. - 2021 - Creating Helm Charts to ease deployment of Enterpr.pdf}
}

@software{GoogleCadvisor2024,
  title = {Google/Cadvisor},
  date = {2024-03-10T11:45:12Z},
  origdate = {2014-06-09T16:36:33Z},
  url = {https://github.com/google/cadvisor},
  urldate = {2024-03-10},
  abstract = {Analyzes resource usage and performance characteristics of running containers.},
  organization = {Google}
}

@online{Helm,
  title = {Helm},
  url = {https://helm.sh/},
  urldate = {2024-03-07},
  abstract = {Helm - The Kubernetes Package Manager.},
  langid = {american},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/YSBS5Y8U/helm.sh.html}
}

@online{helmHelmArchitecture,
  title = {Helm {{Architecture}}},
  author = {Helm},
  url = {https://helm.sh/docs/topics/architecture/},
  urldate = {2024-03-07},
  abstract = {Describes the Helm architecture at a high level.},
  langid = {american},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/ZZKG3KBZ/architecture.html}
}

@online{helmHelmTemplate,
  title = {Helm {{Template}}},
  author = {Helm},
  url = {https://helm.sh/docs/helm/helm_template/},
  urldate = {2024-03-07},
  abstract = {Helm - The Kubernetes Package Manager.},
  langid = {american},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/RHFJ6ICR/helm_template.html}
}

@online{helmHelmVersionSupport,
  title = {Helm {{Version Support Policy}}},
  author = {Helm},
  url = {https://helm.sh/docs/topics/version_skew/},
  urldate = {2024-03-07},
  abstract = {Describes Helm's patch release policy as well as the maximum version skew supported between Helm and Kubernetes.},
  langid = {american},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/9JKI7ELA/version_skew.html}
}

@online{helmLibraryCharts,
  title = {Library {{Charts}}},
  author = {Helm},
  url = {https://helm.sh/docs/topics/library_charts/},
  urldate = {2024-03-07},
  abstract = {Explains library charts and examples of usage},
  langid = {american},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/62YDT4GH/library_charts.html}
}

@article{hieronsSoftwareTestingFoundations2006,
  title = {Software {{Testing Foundations}}: {{A Study Guide}} for the {{Certified Tester Exam}}. {{By Andreas Spillner}}, {{Tilo Linz}} and {{Hans Schaefer}}. {{Published}} by Dpunkt.Verlag, {{Heidelberg}}, {{Germany}}, 2006. {{ISBN}}: 3-89864-363-8, Pp 266: {{Book Reviews}}},
  shorttitle = {Software {{Testing Foundations}}},
  author = {Hierons, Robert M.},
  date = {2006-12-01},
  journaltitle = {Software Testing, Verification \& Reliability},
  shortjournal = {Softw. Test. Verif. Reliab.},
  volume = {16},
  number = {4},
  pages = {289--290},
  issn = {0960-0833}
}

@online{HomeOfficialRed,
  title = {Home | {{Official Red Hat OpenShift Documentation}}},
  url = {https://docs.openshift.com/},
  urldate = {2024-03-10},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/CZGSZ9ZK/docs.openshift.com.html}
}

@online{HorizontalPodAutoscaling,
  title = {Horizontal {{Pod Autoscaling}}},
  url = {https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/},
  urldate = {2024-03-11},
  abstract = {In Kubernetes, a HorizontalPodAutoscaler automatically updates a workload resource (such as a Deployment or StatefulSet), with the aim of automatically scaling the workload to match demand. Horizontal scaling means that the response to increased load is to deploy more Pods. This is different from vertical scaling, which for Kubernetes would mean assigning more resources (for example: memory or CPU) to the Pods that are already running for the workload.},
  langid = {english},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/EWJR3JSW/horizontal-pod-autoscale.html}
}

@software{InfluxdataInfluxdb2024,
  title = {Influxdata/Influxdb},
  date = {2024-03-10T16:40:51Z},
  origdate = {2013-09-26T14:31:10Z},
  url = {https://github.com/influxdata/influxdb},
  urldate = {2024-03-10},
  abstract = {Scalable datastore for metrics, events, and real-time analytics},
  organization = {InfluxData},
  keywords = {database,go,influxdb,metrics,monitoring,react,rust,time-series}
}

@online{Jenkins,
  title = {Jenkins},
  url = {https://www.jenkins.io/},
  urldate = {2024-03-07},
  abstract = {Jenkins – an open source automation server which enables developers around the world to reliably build, test, and deploy their software},
  langid = {english},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/NKBK343R/www.jenkins.io.html}
}

@inproceedings{jiangPerformanceMonitoringSolution2010,
  title = {A {{Performance Monitoring Solution}} for {{Distributed Application System Based}} on {{JMX}}},
  booktitle = {2010 {{Ninth International Conference}} on {{Grid}} and {{Cloud Computing}}},
  author = {Jiang, Haihua and Lv, Hai and Wang, Nan and Di, Rihua},
  date = {2010-11},
  pages = {124--127},
  publisher = {IEEE},
  location = {Nanjing, China},
  doi = {10.1109/GCC.2010.35},
  url = {http://ieeexplore.ieee.org/document/5662515/},
  urldate = {2024-03-10},
  abstract = {Java Management Extensions (JMX) provides the fundamental architecture and standard theory for monitoring distributed system. ASM is a very small and very fast Java bytecode manipulation framework. A performance monitoring system is designed for distributed application system combining these two technologies and has been integrated seamlessly into the Open Education Management System of Central Radio and TV University successfully. The conclusion is that this solution can achieve run-time monitoring of complex business in large distributed system and has good performance and scalability.},
  eventtitle = {2010 9th {{International Conference}} on {{Grid}} and {{Cloud Computing}} ({{GCC}} 2010)},
  isbn = {978-1-4244-9334-0},
  langid = {english},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/K4JEHMVY/Jiang et al. - 2010 - A Performance Monitoring Solution for Distributed .pdf}
}

@online{jonathanBPFUniversalInkernel2014,
  title = {{{BPF}}: The Universal in-Kernel Virtual Machine [{{LWN}}.Net]},
  author = {Jonathan, Corbet},
  date = {2014-05-21},
  url = {https://lwn.net/Articles/599755/},
  urldate = {2023-06-01},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/SN5587XH/599755.html}
}

@book{jorgensenSoftwareTestingCraftsman2021,
  title = {Software {{Testing}}: {{A Craftsman}}'s {{Approach}}},
  shorttitle = {Software {{Testing}}},
  author = {Jorgensen, Paul and DeVries, Byron},
  date = {2021-05-31},
  doi = {10.1201/9781003168447},
  abstract = {The fifth edition of Software Testing—A Craftsman's Approach appears 25 years after the first edition and now there is a co-author, Dr. Byron DeVries. Together, Paul and Byron have 32 years of industrial experience and a few more years of university teaching and research in Software Engineering. Paul’s testing experience is on telephone switching systems software; Byron’s is on avionics systems. The book has evolved over four editions and 25 years of classroom and industrial use. We continue the pattern of presenting theory, using it to describe testing techniques, and illustrating all of this with carefully selected examples. We retained some of the classical examples and replaced others with a comprehensive web-based example, the Foodies Wish List, that is used throughout where appropriate. This lends a unifying “leitmotif” to our book.  Here are some the highlights of the Fifth Edition...  This book now has a website, softwaretestcraft.org (also .com) that contains all Java code, powerpoint presentations, and various notes.  Parts 2, 3, and 4 are essentially object-oriented. All pseudo-code examples are now converted to Java. Unit testing examples use JUnit.  We included specific information on commercial and open-source tools for code-based testing. Also, we added three examples of commercial Model-Based Testing products to the Model-Based Testing chapter.  Testing object-oriented software is consolidated in a single chapter.  There is a new chapter on the feature interaction problem.  There is a new emphasis (and example) for modeling and testing event-driven systems.  We retained the chapter on technical inspections and the corresponding appendix},
  isbn = {978-1-00-316844-7},
  pagetotal = {7-8}
}

@inproceedings{kaldorCanopyEndtoEndPerformance2017,
  title = {Canopy: {{An End-to-End Performance Tracing And Analysis System}}},
  shorttitle = {Canopy},
  booktitle = {Proceedings of the 26th {{Symposium}} on {{Operating Systems Principles}}},
  author = {Kaldor, Jonathan and Mace, Jonathan and Bejda, Michał and Gao, Edison and Kuropatwa, Wiktor and O'Neill, Joe and Ong, Kian Win and Schaller, Bill and Shan, Pingjia and Viscomi, Brendan and Venkataraman, Vinod and Veeraraghavan, Kaushik and Song, Yee Jiun},
  date = {2017-10-14},
  series = {{{SOSP}} '17},
  pages = {34--50},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3132747.3132749},
  url = {https://dl.acm.org/doi/10.1145/3132747.3132749},
  urldate = {2024-03-10},
  abstract = {This paper presents Canopy, Facebook's end-to-end performance tracing infrastructure. Canopy records causally related performance data across the end-to-end execution path of requests, including from browsers, mobile applications, and backend services. Canopy processes traces in near real-time, derives user-specified features, and outputs to performance datasets that aggregate across billions of requests. Using Canopy, Facebook engineers can query and analyze performance data in real-time. Canopy addresses three challenges we have encountered in scaling performance analysis: supporting the range of execution and performance models used by different components of the Facebook stack; supporting interactive ad-hoc analysis of performance data; and enabling deep customization by users, from sampling traces to extracting and visualizing features. Canopy currently records and processes over 1 billion traces per day. We discuss how Canopy has evolved to apply to a wide range of scenarios, and present case studies of its use in solving various performance challenges.},
  isbn = {978-1-4503-5085-3},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/X6X4GXZR/Kaldor et al. - 2017 - Canopy An End-to-End Performance Tracing And Anal.pdf}
}

@book{kanerTestingComputerSoftware1999,
  title = {Testing {{Computer Software}}, {{Second Edition}}},
  author = {Kaner, Cem and Falk, Jack L. and Nguyen, Hung Quoc},
  date = {1999-03},
  edition = {2},
  publisher = {John Wiley \& Sons, Inc.},
  location = {USA},
  abstract = {From the Publisher: This book will teach you how to test computer software under real-world conditions. The authors have all been test managers and software development managers at well-known Silicon Valley software companies. Successful consumer software companies have learned how to produce high-quality products under tight time and budget constraints. The book explains the testing side of that success. Who this book is for:*Testers and Test Managers*Project Managers-Understand the timeline, depth of investigation, and quality of communication to hold testers accountable for.*Programmers-Gain insight into the sources of errors in your code, understand what tests your work will have to pass, and why testers do the things they do.*Students-Train for an entry-level position in software development. What you will learn:*How to find important bugs quickly*How to describe software errors clearly*How to create a testing plan with a minimum of paperwork*How to design and use a bug-tracking system*Where testing fits in the product development process*How to test products that will be translated into other languages*How to test for compatibility with devices, such as printers*What laws apply to software quality JACK FALK consults on software quality management and software engineering management. Jack is certified in Software Quality Engineering by the American Society of Quality. He is Vice Chair of the Santa Clara Valley Software Quality Association and an active participant in the Los Altos Workshops on Software Testing. HUNG Q. NGUYEN is Founder, President, and CEO of softGear technology. He has worked in the computer software and hardware industries, holding management positionsinengineering, quality assurance, testing, product development, and information technology, as well as making significant contributions as a tester and programmer. He is an ASQ-Certified Quality Engineer, and a senior member and San Francisco Section Certification Chairman of the American Society for Quality.},
  isbn = {978-0-471-35846-6},
  pagetotal = {480}
}

@inproceedings{keskinMakingCloudMonitor2022,
  title = {Making the {{Cloud Monitor Real-Time Adaptive}}},
  booktitle = {2022 {{IEEE Cloud Summit}}},
  author = {Keskin, Resul Serkan and Pileggi, Paolo},
  date = {2022-10},
  pages = {69--74},
  doi = {10.1109/CloudSummit54781.2022.00017},
  url = {https://ieeexplore.ieee.org/document/9973163?denied=},
  urldate = {2024-03-10},
  abstract = {The recent Cloud Monitor invention [1] aims to open actual insights, and give greater agency, to stakeholders in the Cloud ecosystem. But the varied nature and diverse user and provider needs, challenge the practicality of creating custom continuous cloud monitoring solutions using it. To accommodate customized needs at scale for dynamic systems and operating environments, we take a first step towards a flexible adaptation mechanism that automates individual monitoring requests in a custom way. We propose a real-time adaptive continuous monitoring extension to the Cloud Monitor and demonstrate potential value from the Cloud User's perspective. We present a reasonable scenario using a real cloud environment. Our result suggests that, despite the need for more research into robustness, this mechanism enables improved agency of Cloud stakeholders. It enables the manageability of continuous monitoring with the Cloud Monitor under dynamic conditions. Ultimately, stakehold-ers can monitor the actual Quality of Service delivered by their cloud in use better and at their own discretion.},
  eventtitle = {2022 {{IEEE Cloud Summit}}},
  keywords = {Adaptability,Cloud Monitor,Ecosystems,Flexibility,Quality of service,Real-time systems,Robustness,Stability analysis,Stakeholders,Technological innovation},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/ZVHH7M2U/Keskin and Pileggi - 2022 - Making the Cloud Monitor Real-Time Adaptive.pdf;/home/jliang/snap/zotero-snap/common/Zotero/storage/4TCP395S/9973163.html}
}

@inproceedings{klaverIndependentRunTimeCloud2021,
  title = {Towards {{Independent Run-Time Cloud Monitoring}}},
  booktitle = {Companion of the {{ACM}}/{{SPEC International Conference}} on {{Performance Engineering}}},
  author = {Klaver, Luuk and Van Der Knaap, Thijs and Van Der Geest, Johan and Harmsma, Edwin and Van Der Waaij, Bram and Pileggi, Paolo},
  date = {2021-04-19},
  pages = {21--26},
  publisher = {ACM},
  location = {Virtual Event France},
  doi = {10.1145/3447545.3451180},
  url = {https://dl.acm.org/doi/10.1145/3447545.3451180},
  urldate = {2024-03-10},
  abstract = {Cloud computing services are integral to the digital transformation. They deliver greater connectivity, tremendous savings, and lower total cost of ownership. Despite such benefits and benchmarking advances, costs are still quite unpredictable, performance is unclear, security is inconsistent, and there is minimal control over aspects like data and service locality. Estimating performance of cloud environments is very hard for cloud consumers. They would like to make informed decisions about which provider better suits their needs using specialized evaluation mechanisms. Providers have their own tools reporting specific metrics, but they are potentially biased and often incomparable across providers. Current benchmarking tools allow comparison but consumers need more flexibility to evaluate environments under actual operating conditions for specialized applications. Ours is early stage work and a step towards a monitoring solution that enables independent evaluation of clouds for very specific application needs. In this paper, we present our initial architecture of the Cloud Monitor that aims to integrate existing and new benchmarks in a flexible and extensible way. By way of a simplistic demonstrator, we illustrate the concept. We report some preliminary monitoring results after a brief time of monitoring and are able to observe unexpected anomalies. The results suggest an independent monitoring solution is a powerful enabler of next generation cloud computing, not only for the consumer but potentially the whole ecosystem.},
  eventtitle = {{{ICPE}} '21: {{ACM}}/{{SPEC International Conference}} on {{Performance Engineering}}},
  isbn = {978-1-4503-8331-8},
  langid = {english},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/HHGZXXHY/Klaver et al. - 2021 - Towards Independent Run-Time Cloud Monitoring.pdf}
}

@inproceedings{korontanisRealtimeMonitoringAnalysis2023,
  title = {Real-Time {{Monitoring}} and {{Analysis}} of {{Edge}} and {{Cloud Resources}}},
  booktitle = {Proceedings of the 3rd {{Workshop}} on {{Flexible Resource}} and {{Application Management}} on the {{Edge}}},
  author = {Korontanis, Ioannis and Makris, Antonios and Theodoropoulos, Theodoros and Tserpes, Konstantinos},
  date = {2023-08-15},
  series = {{{FRAME}} '23},
  pages = {13--18},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3589010.3594892},
  url = {https://dl.acm.org/doi/10.1145/3589010.3594892},
  urldate = {2024-03-10},
  abstract = {As Edge and Cloud platforms increasingly become the basis for hosting applications, monitoring systems need to be able to monitor both the hosts and the deployed applications. Ensuring seamless monitoring of Edge hosts is the most crucial factor, regardless of whether they are virtual machines, Raspberry Pis, or even typical personal computers. The application orchestration process could benefit greatly from monitoring systems, as they could serve as the main source of characterizing hosts and reporting metrics related to users and platforms. This paper introduces a Prometheus-based monitoring stack that is able to monitor both applications and resources on Kubernetes clusters. This monitoring stack has been tested and is already in use within the ACCORDION platform to efficiently monitor applications, regardless of their development unit and host types.},
  isbn = {9798400701641},
  keywords = {characterization,cloud,cluster,edge,monitoring,prometheus},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/RAXAYFSX/Korontanis et al. - 2023 - Real-time Monitoring and Analysis of Edge and Clou.pdf}
}

@inproceedings{liuDesignImplementationCloud2021,
  title = {Design and {{Implementation}} of {{Cloud Computing Platform Monitoring System Based}} on {{Nagios}}},
  booktitle = {2020 {{International Conference}} on {{Data Processing Techniques}} and {{Applications}} for {{Cyber-Physical Systems}}},
  author = {Liu, Jia and Qu, Chengzhang and Zhou, Tianhong},
  editor = {Huang, Chuanchao and Chan, Yu-Wei and Yen, Neil},
  date = {2021},
  series = {Advances in {{Intelligent Systems}} and {{Computing}}},
  pages = {1473--1478},
  publisher = {Springer},
  location = {Singapore},
  doi = {10.1007/978-981-16-1726-3_191},
  abstract = {With the rise of cloud computing technology, cloud environment has gradually become the mainstream way of application system deployment. Cloud computing provides fast allocation, dynamic scheduling and other capabilities to the application system provides a rapid development of basic capabilities. In order to continuously understand the operation of the cloud computing platform itself, it is necessary to build a set of monitoring system suitable for the cloud computing environment. In this study, the monitoring system under the cloud computing environment was studied from the open source monitoring technology, and a cloud computing platform monitoring system was designed and implemented based on Nagios technology. The cloud computing platform monitoring system designed and implemented by this research institute.},
  isbn = {9789811617263},
  langid = {english},
  keywords = {Cloud computing,Distributed architecture,Monitoring platform,Nagios},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/FESQHJVK/Liu et al. - 2021 - Design and Implementation of Cloud Computing Platf.pdf}
}

@inproceedings{magdaNagiosbasedNetworkManagement2013,
  title = {Nagios-Based Network Management for {{Android}}, {{Windows}} and {{Fedora Core}} Terminals Using {{Net-SNMP}} Agents},
  booktitle = {2013 11th {{RoEduNet International Conference}}},
  author = {Magda, Stefan Mihail and Rus, Andrei Bogdan and Dobrota, Virgil},
  date = {2013-01},
  pages = {1--6},
  issn = {2068-1038},
  doi = {10.1109/RoEduNet.2013.6511742},
  url = {https://ieeexplore.ieee.org/document/6511742},
  urldate = {2024-03-11},
  abstract = {The paper is focused on Nagios, an open-source flexible monitoring tool for enterprises. The goal was to add new objects (i.e. QoS parameters) in a management information base MIB starting with the root object identifier OID .1.3.6.1.4.1.8072.9999.9999.1. Furthermore, we wanted to prove that the integration of this enhanced software tool running on several platforms (Android, Windows7, Fedora Core) is a benefit for network administrators. The newly created SNMP Agent and with the existing Nagios Agent were able to update the parameters: Available Transfer Rate ATR and One-Way-Delay OWD. Due to cross-layer techniques involved, the overall solution is an evolutionary step forward towards Future Internet implementations (although it is still stick on SNMP approach).},
  eventtitle = {2013 11th {{RoEduNet International Conference}}},
  keywords = {Androids,available transfer rate,Linux,MIB,Monitoring,Nagios,Object recognition,one-way delay,Quality of service,Servers,SNMP,Syntactics},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/Z92STEG9/Magda et al. - 2013 - Nagios-based network management for Android, Windo.pdf;/home/jliang/snap/zotero-snap/common/Zotero/storage/DBCFV39N/6511742.html}
}

@online{ManualPagesNagios,
  title = {Manual {{Pages}} - {{Nagios Plugins}}},
  url = {https://nagios-plugins.org/documentation/},
  urldate = {2024-03-11},
  langid = {american},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/T664JWZ6/index.html}
}

@incollection{marianiChapterFourRecent2015,
  title = {Chapter {{Four}} - {{Recent Advances}} in {{Automatic Black-Box Testing}}},
  booktitle = {Advances in {{Computers}}},
  author = {Mariani, Leonardo and Pezzè, Mauro and Zuddas, Daniele},
  editor = {Memon, Atif},
  date = {2015-01-01},
  volume = {99},
  pages = {157--193},
  publisher = {Elsevier},
  doi = {10.1016/bs.adcom.2015.04.002},
  url = {https://www.sciencedirect.com/science/article/pii/S0065245815000315},
  urldate = {2024-03-10},
  abstract = {Research in black-box testing has produced impressive results in the past 40 years, addressing many aspects of the problem that span from integration with the development process, to test case generation and execution. In the past few years, the research in this area has focused mostly on the automation of black-box approaches to improve applicability and scalability. This chapter surveys the recent advances in automatic black-box testing, covering contributions from 2010 to 2014, presenting the main research results and discussing the research trends.},
  keywords = {Black-box testing,Combinatorial interaction testing,Model-based testing,Random testing,Test automation,Testing with complex inputs}
}

@online{MonitoringOverviewMonitoring,
  title = {Monitoring Overview | {{Monitoring}} | {{OpenShift Container Platform}} 4.13},
  url = {https://docs.openshift.com/container-platform/4.13/monitoring/monitoring-overview.html},
  urldate = {2024-03-10},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/IHU57LDK/monitoring-overview.html}
}

@book{myersArtSoftwareTesting2004,
  title = {The {{Art}} of {{Software Testing}}},
  author = {Myers, Glenford J.},
  date = {2004},
  publisher = {Wiley},
  location = {Newark, UNITED STATES},
  url = {http://ebookcentral.proquest.com/lib/munchentech/detail.action?docID=5247647},
  urldate = {2023-12-30},
  abstract = {Currently not available for this book.},
  isbn = {978-1-280-34616-3},
  pagetotal = {9-11},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/6Y2TSNIC/detail.html}
}

@online{NagiosOpenSource,
  title = {Nagios {{Open Source}} | {{Nagios Open Source}}},
  url = {https://www.nagios.org/},
  urldate = {2024-03-10},
  abstract = {Nagios Core is our original open-source monitoring solution, developed for and supported by hundreds of community members. Create your ideal monitoring and},
  langid = {american},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/JTQRGQ7Z/www.nagios.org.html}
}

@online{NagiosPluginsHome2023,
  title = {Nagios {{Plugins}} | {{The}} Home of the Official {{Nagios}}® {{Plugins}}},
  date = {2023-12-07},
  url = {https://nagios-plugins.org/},
  urldate = {2024-03-11},
  langid = {american},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/P8TAZMJY/nagios-plugins.org.html}
}

@online{NagiosPluginsNagios,
  title = {Nagios {{Plugins}} | {{Nagios Open Source}}},
  url = {https://www.nagios.org/downloads/nagios-plugins/},
  urldate = {2024-03-11},
  abstract = {Monitor just about anything that runs on electricity. The official Nagios Plugins package contains over 50 plugins to get you started monitoring all the basics.},
  langid = {american},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/QIMZT3HL/nagios-plugins.html}
}

@article{nevesDetailedBlackboxMonitoring2021,
  title = {Detailed Black-Box Monitoring of Distributed Systems},
  author = {Neves, Francisco and Vilaça, Ricardo and Pereira, José},
  date = {2021-03-01},
  journaltitle = {ACM SIGAPP Applied Computing Review},
  shortjournal = {ACM SIGAPP Applied Computing Review},
  volume = {21},
  pages = {24--36},
  doi = {10.1145/3477133.3477135},
  abstract = {Modern containerized distributed systems, such as big data storage and processing stacks or micro-service based applications, are inherently hard to monitor and optimize, as resource usage does not directly match hardware resources due to multiple virtualization layers. For instance, interapplication traffic is an important factor in as it directly indicates how components interact, it has not been possible to accurately monitor it in an application independent way and without severe overhead, thus putting it out of reach of cloud platforms. In this paper we present an efficient black-box monitoring approach for gathering detailed structural information of collaborating processes in a distributed system that can be queried for various purposes, as it includes both information about processes, containers, and hosts, as well as resource usage and amount of data exchanged. The key to achieving high detail and low overhead without custom application instrumentation is to use a kernel-aided event driven strategy. We validate a prototype implementation by applying it to multi-platform microservice deployments, evaluate its performance with micro-benchmarks, and demonstrate its usefulness for container placement in a distributed data storage and processing stack (i.e., Cassandra and Spark).},
  keywords = {adaptive placement,containers,monitoring},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/YHRL9Q5W/Neves et al. - 2021 - Detailed black-box monitoring of distributed syste.pdf}
}

@article{nidhraBlackBoxWhite2012,
  title = {Black {{Box}} and {{White Box Testing Techniques}} - {{A Literature Review}}},
  author = {Nidhra, S.},
  date = {2012-06-30},
  journaltitle = {International Journal of Embedded Systems and Applications},
  shortjournal = {International Journal of Embedded Systems and Applications},
  volume = {2},
  pages = {29--50},
  doi = {10.5121/ijesa.2012.2204},
  abstract = {There are several methods for automatic test case generation has been proposed in the past. But most of these techniques are structural testing techniques that require the understanding of the internal working of the program. There is less practical coverage of all testing techniques together. In this paper we conducted a literature study on all testing techniques together that are related to both Black and White box testing techniques, moreover we assume a case situation of Insurance premium calculation for driver and we derive the test cases and test data for white box testing methods such as Branch testing, Statement testing, Condition Coverage testing, multiple condition coverage testing, in the similar way we derive the test cases and test data for the black box testing methods such as: Equivalence partitioning and Boundary value analysis. The overall aim of this literature study is to clearly explain different testing techniques along with a case situation and their advantages.},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/9ZNB7UGG/Nidhra - 2012 - Black Box and White Box Testing Techniques - A Lit.pdf}
}

@online{NRPENagiosRemote,
  title = {{{NRPE}} - {{Nagios Remote Plugin Executor}} - {{Nagios Exchange}}},
  url = {https://exchange.nagios.org/directory/Addons/Monitoring-Agents/NRPE--2D-Nagios-Remote-Plugin-Executor/details},
  urldate = {2024-03-11},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/XCB5QRTN/details.html}
}

@software{OpenshiftNetworkmetricsdaemon2023,
  title = {Openshift/Network-Metrics-Daemon},
  date = {2023-08-19T12:28:24Z},
  origdate = {2020-02-11T19:08:55Z},
  url = {https://github.com/openshift/network-metrics-daemon},
  urldate = {2024-03-10},
  abstract = {network-metrics-daemon is a daemon component that collects and publishes network related metrics},
  organization = {OpenShift}
}

@online{OperatorPattern,
  title = {Operator Pattern},
  url = {https://kubernetes.io/docs/concepts/extend-kubernetes/operator/},
  urldate = {2023-12-28},
  abstract = {Operators are software extensions to Kubernetes that make use of custom resources to manage applications and their components. Operators follow Kubernetes principles, notably the control loop. Motivation The operator pattern aims to capture the key aim of a human operator who is managing a service or set of services. Human operators who look after specific applications and services have deep knowledge of how the system ought to behave, how to deploy it, and how to react if there are problems.},
  langid = {english},
  organization = {Kubernetes},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/6AZV2NMT/operator.html}
}

@online{oreillySpotlightCloudUsing,
  title = {Spotlight on {{Cloud}}: {{Using Prometheus}} for {{Black Box Monitoring}} with {{Aaron Wieczorek}}},
  shorttitle = {Spotlight on {{Cloud}}},
  author = {O'Reilly},
  url = {https://learning.oreilly.com/videos/spotlight-on-cloud/0636920360216/0636920360216-video328883/},
  urldate = {2023-05-21},
  langid = {english},
  organization = {O'Reilly Online Learning},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/NJVYVEE8/0636920360216-video328883.html}
}

@inproceedings{ostrowskiDiagnosingLatencyMultiTier2011,
  title = {Diagnosing {{Latency}} in {{Multi-Tier Black-Box Services}}},
  booktitle = {5th {{Workshop}} on {{Large Scale Distributed Systems}} and {{Middleware}} ({{LADIS}} 2011)},
  author = {Ostrowski, Krzysztof and Mann, Gideon and Sandler, Mark},
  date = {2011},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/6FUW2RGB/Ostrowski et al. - 2011 - Diagnosing Latency in Multi-Tier Black-Box Service.pdf}
}

@inproceedings{ottoAddressingLegalRequirements2007,
  title = {Addressing {{Legal Requirements}} in {{Requirements Engineering}}},
  booktitle = {15th {{IEEE International Requirements Engineering Conference}} ({{RE}} 2007)},
  author = {Otto, Paul N. and Anton, Annie I.},
  date = {2007-10},
  pages = {5--14},
  issn = {2332-6441},
  doi = {10.1109/RE.2007.65},
  abstract = {Legal texts, such as regulations and legislation, are playing an increasingly important role in requirements engineering and system development. Monitoring systems for requirements and policy compliance has been recognized in the requirements engineering community as a key area for research. Similarly, regulatory compliance is critical in systems that are governed by regulations and law, especially given that non-compliance can result in both financial and criminal penalties. Working with legal texts can be very challenging, however, because they contain numerous ambiguities, cross-references, domain-specific definitions, and acronyms, and are frequently amended via new regulations and case law. Requirements engineers and compliance auditors must be able to identify relevant regulations, extract requirements and other key concepts, and monitor compliance throughout the software lifecycle. This paper surveys research efforts over the past 50 years in handling legal texts for systems development. These efforts include the use of symbolic logic, logic programming, first-order temporal logic, deontic logic, defeasible logic, goal modeling, and semi-structured representations. This survey can aid requirements engineers and auditors to better specify, monitor, and test software systems for compliance.},
  eventtitle = {15th {{IEEE International Requirements Engineering Conference}} ({{RE}} 2007)},
  keywords = {Computer science,Government,Information security,Law,Legal factors,Legislation,Logic programming,Monitoring,Software systems,Systems engineering and theory},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/2KIWZECH/Otto and Anton - 2007 - Addressing Legal Requirements in Requirements Engi.pdf;/home/jliang/snap/zotero-snap/common/Zotero/storage/HT5KPE7X/4384161.html}
}

@online{OverviewPrometheus,
  title = {Overview | {{Prometheus}}},
  url = {https://prometheus.io/docs/introduction/overview/},
  urldate = {2023-05-26},
  abstract = {An open-source monitoring system with a dimensional data model, flexible query language, efficient time series database and modern alerting approach.},
  langid = {english},
  organization = {Prometheus},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/JR9DREUR/overview.html}
}

@article{parkTechnologyTrendsChallenges2023,
  title = {Technology Trends and Challenges in {{SDN}} and Service Assurance for End-to-End Network Slicing},
  author = {Park, Kibeom and Sung, Sangmo and Kim, Hokeun and Jung, Jae-il},
  date = {2023-10-01},
  journaltitle = {Computer Networks},
  shortjournal = {Computer Networks},
  volume = {234},
  pages = {109908},
  issn = {1389-1286},
  doi = {10.1016/j.comnet.2023.109908},
  url = {https://www.sciencedirect.com/science/article/pii/S1389128623003535},
  urldate = {2024-03-10},
  abstract = {Network slicing is a core technology to enable new services and solutions in 5G and upcoming 6G communications. However, many issues arise when applying network slicing at a commercial scale, as this requires end-to-end management and automation of the network. Network slicing also requires various state-of-the-art technologies based on collaboration across international standards organizations and open-source communities. This paper reviews and summarizes the recent technological trends and challenges related to Software-Defined Networking (SDN) and service assurance for end-to-end network slicing. First, we focus on the essential use cases and technology trends associated with network slicing, followed by a survey of standard organizations and open-source projects related to network slicing and how they have evolved. Then, we overview an end-to-end network slicing architecture considering Open Radio Access Network (O-RAN) standard. For Radio Access Network (RAN) slicing, we zero in on managing RAN and xHaul with an integrated policy. For transport slicing, we discuss SDN architecture and requirements for network slicing with traffic isolation, unified QoS policy, and traffic engineering. We also cover SLA management using protocol-independent active monitoring and passive monitoring. In the later part of the paper, we summarize technical considerations for end-to-end network slicing, including the RAN-integrated xHaul architecture, converged enterprise network for multi-connectivity, 5G edge data center architectures using programmable data plane, and network slicing security. Overall, this paper reviews the various design issues associated with network slicing and the proposals to resolve these issues to facilitate end-to-end network slicing at a commercial scale.},
  keywords = {Beyond-5G (B5G),Cloud native,End-to-end slicing,Fifth-generation (5G),Mobile xHaul,Network Function Virtualization (NFV),Network slicing,Open source,Open standard,Service assurance,Sixth-generation (6G),Software Defined Network (SDN)},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/87PUU6T9/S1389128623003535.html}
}

@inproceedings{perez-espinozaDistributedArchitectureMonitoring2015,
  title = {A {{Distributed Architecture}} for {{Monitoring Private Clouds}}},
  booktitle = {2015 26th {{International Workshop}} on {{Database}} and {{Expert Systems Applications}} ({{DEXA}})},
  author = {Perez-Espinoza, J.A. and Sosa-Sosa, Victor J. and {J.L.Gonzalez} and Tello-Leal, Edgar},
  date = {2015-09},
  pages = {186--190},
  publisher = {IEEE},
  location = {Valencia, Spain},
  doi = {10.1109/DEXA.2015.51},
  url = {https://ieeexplore.ieee.org/document/7406290},
  urldate = {2024-03-10},
  abstract = {Cloud monitoring has become a key tool for organizations to ensure that their critical processes are being effectively managed in a private cloud infrastructure. A cloud monitoring tool should include complex tasks such as information extraction, management and planning of alerts in order to keep the service up during failures. However, current available solutions for private clouds only support some of these tasks. In this paper we present a distributed architecture for monitoring private clouds that unifies a set of monitoring tasks in a single service. This service includes the following configurable tools: Collectors, Metasensors, Distributors and Visualizer. A collector is a software tool that gathers monitoring information from physical and/or virtual machines (PM and/or VM) by using a set of special monitoring tools dubbed Metasensors. Collectors include a neural network-based component to classify the type of current workload on the monitored resource. This classification allows system administrators to define thresholds and create alerts to prevent saturation scenarios. A distributor is a tool that assigns the resources to be monitored (PMs and VMs) to collectors and concentrates the information gathered and processed by collectors in order to obtain the current workload status information of the private cloud infrastructure. This information can be showed to system administrator by using our visualizer tool. Our distribution approach avoids data centralization and provides the service with load balancing and fault tolerance. We developed a prototype based on our architecture and conducted an experimental evaluation as a proof of concept. The evaluation revealed the feasibility of our architecture in terms of performance and precision.},
  eventtitle = {2015 26th {{International Workshop}} on {{Database}} and {{Expert Systems Applications}} ({{DEXA}})},
  isbn = {978-1-4673-7581-8 978-1-4673-7582-5},
  langid = {english},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/RNE5G9QR/Perez-Espinoza et al. - 2015 - A Distributed Architecture for Monitoring Private .pdf}
}

@software{PersesPerses2024,
  title = {Perses/Perses},
  date = {2024-03-07T14:28:46Z},
  origdate = {2021-01-26T20:41:33Z},
  url = {https://github.com/perses/perses},
  urldate = {2024-03-10},
  abstract = {The CNCF candidate for observability visualisation. Already supports Prometheus - more data sources to come!},
  organization = {Perses},
  keywords = {dashboard,monitoring,prometheus}
}

@book{pivottoPrometheusRunning2nd,
  title = {Prometheus: {{Up}} \& {{Running}}, 2nd {{Edition}}},
  shorttitle = {Prometheus},
  author = {Pivotto, Julien and Brazil, Brian},
  url = {https://learning.oreilly.com/library/view/prometheus-up/9781098131135/},
  urldate = {2024-03-09},
  abstract = {Get up to speed with Prometheus, the metrics-based monitoring system used in production by tens of thousands of organizations. This updated second edition provides site reliability engineers,...},
  isbn = {978-1-09-813113-5},
  langid = {english},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/KL3Y8UET/9781098131135.html}
}

@online{plotkaIntroducingPrometheusAgent2021,
  title = {Introducing {{Prometheus Agent Mode}}, an {{Efficient}} and {{Cloud-Native Way}} for {{Metric Forwarding}} | {{Prometheus}}},
  author = {Plotka, Bartlomiej},
  date = {2021-11-16},
  url = {https://prometheus.io/blog/2021/11/16/agent/},
  urldate = {2023-12-27},
  abstract = {An open-source monitoring system with a dimensional data model, flexible query language, efficient time series database and modern alerting approach.},
  langid = {english},
  organization = {Prometheus},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/4L3M6K32/agent.html}
}

@online{ProductionGradeContainerOrchestration,
  title = {Production-{{Grade Container Orchestration}}},
  url = {https://kubernetes.io/},
  urldate = {2024-03-10},
  abstract = {Production-Grade Container Orchestration},
  langid = {english},
  organization = {Kubernetes},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/PS9NY9KY/kubernetes.io.html}
}

@online{PrometheusAgentSupport,
  title = {Prometheus {{Agent}} Support},
  url = {https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/designs/prometheus-agent.md},
  urldate = {2023-12-29},
  abstract = {Prometheus Operator creates/configures/manages Prometheus clusters atop Kubernetes - prometheus-operator/prometheus-operator},
  langid = {english},
  organization = {GitHub},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/F24TL6G2/prometheus-agent.html}
}

@online{PrometheusMonitoringSystem,
  title = {Prometheus - {{Monitoring}} System \& Time Series Database},
  url = {https://prometheus.io/},
  urldate = {2024-03-10},
  abstract = {An open-source monitoring system with a dimensional data model, flexible query language, efficient time series database and modern alerting approach.},
  langid = {english},
  organization = {Prometheus},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/F8KREI96/prometheus.io.html}
}

@online{PrometheusOperator,
  title = {Prometheus {{Operator}}},
  url = {https://prometheus-operator.dev/},
  urldate = {2024-03-10},
  abstract = {The Prometheus Operator manages Prometheus clusters atop Kubernetes},
  langid = {american},
  organization = {Prometheus Operator},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/49LK5UFE/prometheus-operator.dev.html}
}

@inproceedings{ramadoniAnalysisUseDeclarative2021,
  title = {Analysis on the {{Use}} of {{Declarative}} and {{Pull-based Deployment Models}} on {{GitOps Using Argo CD}}},
  booktitle = {2021 4th {{International Conference}} on {{Information}} and {{Communications Technology}} ({{ICOIACT}})},
  author = {{Ramadoni} and Utami, Ema and Fatta, Hanif Al},
  date = {2021-08-30},
  pages = {186--191},
  publisher = {IEEE},
  location = {Yogyakarta, Indonesia},
  doi = {10.1109/ICOIACT53268.2021.9563984},
  url = {https://ieeexplore.ieee.org/document/9563984/},
  urldate = {2024-03-08},
  eventtitle = {2021 4th {{International Conference}} on {{Information}} and {{Communications Technology}} ({{ICOIACT}})},
  isbn = {978-1-66543-394-5},
  langid = {english},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/QMFRYRHN/Ramadoni et al. - 2021 - Analysis on the Use of Declarative and Pull-based .pdf}
}

@online{redhatAssociatingSecondaryInterfaces,
  title = {Associating Secondary Interfaces Metrics to Network Attachments | {{Networking}} | {{OpenShift Container Platform}} 4.10},
  author = {RedHat},
  url = {https://docs.openshift.com/container-platform/4.10/networking/associating-secondary-interfaces-metrics-to-network-attachments.html},
  urldate = {2024-02-19},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/J34UFSVJ/associating-secondary-interfaces-metrics-to-network-attachments.html}
}

@online{RedHatOpenShift,
  title = {Red {{Hat OpenShift}} Enterprise {{Kubernetes}} Container Platform},
  url = {https://www.redhat.com/en/technologies/cloud-computing/openshift},
  urldate = {2024-03-10},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/XARWGRA9/openshift.html}
}

@online{ResearchworkarchiveArchive2023,
  title = {Research-Work-Archive/Archive/2023/Winter/Docs/Msc\_paulhdk\_out\_of\_spec\_compilation\_in\_the\_presence\_of\_dragons.Pdf at Main · {{TUM-DSE}}/Research-Work-Archive},
  url = {https://github.com/TUM-DSE/research-work-archive/blob/main/archive/2023/winter/docs/msc_paulhdk_out_of_spec_compilation_in_the_presence_of_dragons.pdf},
  urldate = {2024-03-10},
  abstract = {Finished theses. Contribute to TUM-DSE/research-work-archive development by creating an account on GitHub.},
  langid = {english},
  organization = {GitHub},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/LTCZJA6W/msc_paulhdk_out_of_spec_compilation_in_the_presence_of_dragons.html}
}

@online{rollerArgoProjectMaking2022,
  title = {The {{Argo Project}}: {{Making GitOps Accessible}} to {{Everyone}}},
  shorttitle = {The {{Argo Project}}},
  author = {Roller, Joshua},
  date = {2022-05-20T13:00:00+00:00},
  url = {https://www.computer.org/publications/tech-news/trends/the-argo-project/},
  urldate = {2024-03-11},
  abstract = {The Argo project was launched to build and manage continuous delivery workflows on Kubernetes. It consists of four projects. Continue reading to learn more.},
  langid = {american},
  organization = {IEEE Computer Society},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/65GXGFYK/the-argo-project.html}
}

@article{shahinContinuousIntegrationDelivery2017,
  title = {Continuous {{Integration}}, {{Delivery}} and {{Deployment}}: {{A Systematic Review}} on {{Approaches}}, {{Tools}}, {{Challenges}} and {{Practices}}},
  shorttitle = {Continuous {{Integration}}, {{Delivery}} and {{Deployment}}},
  author = {Shahin, Mojtaba and Ali Babar, Muhammad and Zhu, Liming},
  date = {2017},
  journaltitle = {IEEE Access},
  shortjournal = {IEEE Access},
  volume = {5},
  pages = {3909--3943},
  issn = {2169-3536},
  doi = {10.1109/ACCESS.2017.2685629},
  url = {http://ieeexplore.ieee.org/document/7884954/},
  urldate = {2024-03-10},
  abstract = {Continuous practices, i.e., continuous integration, delivery, and deployment, are the software development industry practices that enable organizations to frequently and reliably release new features and products. With the increasing interest in the literature on continuous practices, it is important to systematically review and synthesize the approaches, tools, challenges, and practices reported for adopting and implementing continuous practices. This paper aimed at systematically reviewing the state of the art of continuous practices to classify approaches and tools, identify challenges and practices in this regard, and identify the gaps for future research. We used the systematic literature review method for reviewing the peerreviewed papers on continuous practices published between 2004 and June 1, 2016. We applied the thematic analysis method for analyzing the data extracted from reviewing 69 papers selected using predefined criteria. We have identified 30 approaches and associated tools, which facilitate the implementation of continuous practices in the following ways: 1) reducing build and test time in continuous integration (CI); 2) increasing visibility and awareness on build and test results in CI; 3) supporting (semi-) automated continuous testing; 4) detecting violations, flaws, and faults in CI; 5) addressing security and scalability issues in deployment pipeline; and 6) improving dependability and reliability of deployment process. We have also determined a list of critical factors, such as testing (effort and time), team awareness and transparency, good design principles, customer, highly skilled and motivated team, application domain, and appropriate infrastructure that should be carefully considered when introducing continuous practices in a given organization. The majority of the reviewed papers were validation (34.7\%) and evaluation (36.2\%) research types. This paper also reveals that continuous practices have been successfully applied to both greenfield and maintenance projects. Continuous practices have become an important area of software engineering research and practice. While the reported approaches, tools, and practices are addressing a wide range of challenges, there are several challenges and gaps, which require future research work for improving the capturing and reporting of contextual information in the studies reporting different aspects of continuous practices; gaining a deep understanding of how software-intensive systems should be (re-) architected to support continuous practices; and addressing the lack of knowledge and tools for engineering processes of designing and running secure deployment pipelines.},
  langid = {english},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/NKWW6IIL/Shahin et al. - 2017 - Continuous Integration, Delivery and Deployment A.pdf}
}

@book{spillnerSoftwareTestingFoundations2021,
  title = {Software {{Testing Foundations}}, 5th {{Edition}}},
  author = {Spillner, Andreas and Linz, Tilo},
  date = {2021},
  publisher = {dpunkt},
  url = {https://learning.oreilly.com/library/view/software-testing-foundations/9781098129620/},
  urldate = {2023-12-30},
  abstract = {Professional testing is an essential part of the quality assurance processes in- volved in developing and maintaining software, regardless of whether you use a conventional or an agile development...},
  isbn = {978-1-09-812962-0},
  langid = {english},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/I83VHZLH/9781098129620.html}
}

@online{SplunkKeyEnterprise,
  title = {Splunk | {{The Key}} to {{Enterprise Resilience}}},
  url = {https://www.splunk.com},
  urldate = {2024-03-10},
  abstract = {Splunk is the key to enterprise resilience. Our platform enables organizations around the world to prevent major issues, absorb shocks and accelerate digital transformation.},
  langid = {english},
  organization = {Splunk},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/V38JQUG8/www.splunk.com.html}
}

@online{tsiliasHowRelabelingPrometheus2022,
  title = {How Relabeling in Prometheus Works},
  author = {Tsilias, Paschalis},
  date = {2022-03-21},
  url = {https://grafana.com/blog/2022/03/21/how-relabeling-in-prometheus-works/},
  urldate = {2023-12-27},
  abstract = {Relabeling in Prometheus is a powerful tool that allows you to classify and filter targets and metrics.},
  langid = {english},
  organization = {Grafana Labs},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/FE8KQBBA/how-relabeling-in-prometheus-works.html}
}

@online{UnderstandingUsingMultitarget,
  title = {Understanding and Using the Multi-Target Exporter Pattern | {{Prometheus}}},
  url = {https://prometheus.io/docs/guides/multi-target-exporter/},
  urldate = {2023-12-27},
  abstract = {An open-source monitoring system with a dimensional data model, flexible query language, efficient time series database and modern alerting approach.},
  langid = {english},
  organization = {Prometheus},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/PRT33YW4/multi-target-exporter.html}
}

@inproceedings{wallschlagerAnomalyDetectionBlack2018,
  title = {Anomaly {{Detection}} for {{Black Box Services}} in {{Edge Clouds Using Packet Size Distribution}}},
  booktitle = {2018 {{IEEE}} 7th {{International Conference}} on {{Cloud Networking}} ({{CloudNet}})},
  author = {Wallschläger, Marcel and Gulenko, Anton and Schmidt, Florian and Acker, Alexander and Kao, Odej},
  date = {2018-10},
  pages = {1--6},
  doi = {10.1109/CloudNet.2018.8549546},
  url = {https://ieeexplore.ieee.org/document/8549546?denied=},
  urldate = {2024-03-09},
  abstract = {Future services in fields like autonomous driving and virtual reality rely on cloud computing resources located at the edge of Internet Service Provider(ISP) networks. Instead of deploying many service-specific monitoring and reliability platforms, a centralized monitoring solution can reduce the usage of the already sparse edge cloud resources. The ISP can offer such a service using the black box monitoring approach presented in this paper. Current cloud providers already collect data about customer services for cloud performance and cloud reliability. We propose to extend current monitoring solutions for virtual machines by real-time analysis of network packet headers. In particular, we use the packet size distribution and the TCP connection time to infer the operational state of the service. We conduct an evaluation of the presented approach using a content delivery system which is set into different load and anomaly states. The random forest algorithm trained to differentiate normal from abnormal service states based on the collected data resulted in an accuracy of 94\%. The overhead of collecting the data on a commodity hardware hypervisor using eBPF is about 3\% CPU at 10GB/s.},
  eventtitle = {2018 {{IEEE}} 7th {{International Conference}} on {{Cloud Networking}} ({{CloudNet}})},
  keywords = {Anomaly detection,Cloud computing,cloud networks,edge cloud,Measurement,monitoring,Monitoring,network function virtualization,Protocols,Virtual machining,Virtual reality},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/KAXH3NEC/Wallschläger et al. - 2018 - Anomaly Detection for Black Box Services in Edge C.pdf}
}

@online{WeaveworksWeavegitopsWeave,
  title = {Weaveworks/Weave-Gitops: {{Weave GitOps}} Provides Insights into Your Application Deployments, and Makes Continuous Delivery with {{GitOps}} Easier to Adopt and Scale across Your Teams.},
  url = {https://github.com/weaveworks/weave-gitops},
  urldate = {2024-03-10},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/QRRT7TS7/weave-gitops.html}
}

@online{wickramasingheActiveVsPassive2023,
  title = {Active vs. {{Passive Monitoring}}: {{What}}’s {{The Difference}}?},
  shorttitle = {Active vs. {{Passive Monitoring}}},
  author = {Wickramasinghe, Shanika},
  date = {2023-11-20},
  url = {https://www.splunk.com/en_us/blog/learn/active-vs-passive-monitoring.html},
  urldate = {2024-01-08},
  abstract = {Active and passive monitoring: which one is for you? Let’s look at the two methods, along with their use cases, data volumes, and control over the data.},
  langid = {english},
  organization = {Splunk},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/CIGKEJCP/active-vs-passive-monitoring.html}
}

@inproceedings{yongdnogScalableIntegratedCloud2013,
  title = {A {{Scalable}} and {{Integrated Cloud Monitoring Framework Based}} on {{Distributed Storage}}},
  booktitle = {2013 10th {{Web Information System}} and {{Application Conference}}},
  author = {Yongdnog, Hou and Jing, Wang and Zhuofeng, Zhao and Yanbo, Han},
  date = {2013-11},
  pages = {318--323},
  publisher = {IEEE},
  location = {Yangzhou, China},
  doi = {10.1109/WISA.2013.66},
  url = {http://ieeexplore.ieee.org/document/6778657/},
  urldate = {2024-03-10},
  abstract = {With the development of cloud computing technology, it is becoming increasingly important to monitor and manage the cloud resources. For the cloud resources show the features of diversity, dynamic and large-scale, it consumes a lot of server resources while the monitoring data stores on one server, and it’s also not efficient for querying data. Therefore this paper presents a scalable and integrated cloud monitoring framework based on distributed storage. It is facilitated for operation and maintenance personnel and end users to check the operating status on the cloud platform by accessing an integrated monitoring interface, while taking a distributed storage of monitoring data. It also improves query efficiency, ensures the stability of the cloud platform and the quality of services. Proved by experiments that the framework is general applicability, and it is an effective way to support the cloud platform monitoring.},
  eventtitle = {2013 10th {{Web Information System}} and {{Application Conference}} ({{WISA}})},
  isbn = {978-1-4799-3219-1 978-1-4799-3218-4},
  langid = {english},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/2GXXCTAD/Yongdnog et al. - 2013 - A Scalable and Integrated Cloud Monitoring Framewo.pdf}
}

@inproceedings{zeroualiHelmChartsKubernetes2023,
  title = {Helm {{Charts}} for {{Kubernetes Applications}}: {{Evolution}}, {{Outdatedness}} and {{Security Risks}}},
  shorttitle = {Helm {{Charts}} for {{Kubernetes Applications}}},
  booktitle = {2023 {{IEEE}}/{{ACM}} 20th {{International Conference}} on {{Mining Software Repositories}} ({{MSR}})},
  author = {Zerouali, Ahmed and Opdebeeck, Ruben and De Roover, Coen},
  date = {2023-05},
  pages = {523--533},
  publisher = {IEEE},
  location = {Melbourne, Australia},
  doi = {10.1109/MSR59073.2023.00078},
  url = {https://ieeexplore.ieee.org/document/10173942/},
  urldate = {2024-03-08},
  abstract = {Using Kubernetes for the deployment, management and scaling of containerized applications has become a common practice. To facilitate the installation and management of these applications, practitioners can use the Helm package manager to assemble their configuration files into charts. The latter are reusable packages of pre-configured Kubernetes resources that can be deployed as a unit. In this paper, we aim to support chart developers and users by carrying out a comprehensive study on publicly available charts. For 9,482 charts that are distributed via the Artifact Hub repository, we mine and collect the list of their metadata, versions, dependencies, maintainers and container images. Then, we carry out an empirical analysis to assess the state and evolution of charts, as well as the outdatedness and security risks of their images. We found that the ecosystem forming around Helm charts is growing fast. However, most of the charts are not official with no popularity and no license. We also observed that charts tend to release multiple versions, but around half of them are still in the initial development phase. When looking at the container images used in charts, we found that around half of them are outdated and 88.1\% of them are exposed to vulnerabilities, jeopardizing 93.7\% of the charts.},
  eventtitle = {2023 {{IEEE}}/{{ACM}} 20th {{International Conference}} on {{Mining Software Repositories}} ({{MSR}})},
  isbn = {9798350311846},
  langid = {english},
  file = {/home/jliang/snap/zotero-snap/common/Zotero/storage/VS52ZUWH/Zerouali et al. - 2023 - Helm Charts for Kubernetes Applications Evolution.pdf}
}

@article{zotero-191,
  type = {article}
}
